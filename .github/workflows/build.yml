name: 🏗️ Build OpenWrt Base Source

# 触发条件：push, pull_request, 定时（每天）和手动触发（workflow_dispatch）
on:
  push:
  #  branches:
  #    - main # 只有在 main 分支 push 时触发
  #pull_request: # PR 时触发
  #schedule:
  #  - cron: '0 0 * * *'  # 每天自动触发一次
  workflow_dispatch:  # 手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    # 使用自定义 Docker 镜像
    container:
      image: 298977887/openwrt-builder:latest

    steps:
      - name: 🔢 生成版本号
        id: version
        run: |
          VERSION_TAG="v$(date +'%Y%m%d-%H%M')"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
      
      - name: 📥 克隆 LEDE 源码
        run: |
          git clone https://github.com/coolsnowwolf/lede
          cd lede

      - name: 🔄 更新 feeds 并安装
        run: |
          cd lede
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 🔧 设置编译配置
        run: |
          cd lede
          # make menuconfig  # 这里您可以根据需要修改配置--
          make defconfig  # 生成默认的 .config 文件

      - name: 📦 下载 dl 库
        run: |
          cd lede
          make download -j8

      - name: ⚙️ 编译固件
        run: |
          cd lede
          make V=s -j$(nproc) #使用所有 CPU 编译

      - name: 创建 GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          #tag_name: "v1.0.0"  # 根据实际情况设置版本
          tag_name: "${{ env.VERSION_TAG }}"  # 使用自动生成的版本号
          #release_name: "OpenWrt Firmware Release"
          release_name: "OpenWrt Firmware Release ${{ env.VERSION_TAG }}"
          draft: false
          prerelease: false

      - name: 📤 上传 .vmdk 文件到 GitHub Releases
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: lede/bin/targets/*/*/*.vmdk  # 匹配所有 .vmdk 文件
          asset_name: "openwrt_firmware_${{ env.VERSION_TAG }}.vmdk"  # 使用版本号命名文件
          asset_content_type: application/octet-stream